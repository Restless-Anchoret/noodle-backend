swagger: '2.0'
info:
  description: >
    REST API specification of Noodle planning system.
  version: '1.0'
  title: Noodle REST API
basePath: /api/v1
host: localhost:8080
tags:
  - name: Account
  - name: Lists
  - name: Tasks
  - name: Tags
  - name: System
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
produces:
  - application/json
consumes:
  - application/json
schemes:
  - http

paths:
  # Account end points
  /account:
    get:
      tags:
        - Account
      summary: Get current account info
      description: Returns id, login and name of currently authenticated account.
      security:
        - Bearer: []
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/Account'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account
      summary: Register in the system
      description: User sends new login, name and password to the system and it registers a new account.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RegistrationRequest'
      responses:
        201:
          description: Successful operation.
          schema:
            $ref: '#/definitions/SignInResponse'
        400:
          description: |
            * Code 1 - Request validation error.
            * Code 2 - Login is already used.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account
      summary: Change account name and password
      description: User sends new name, old password and new password to the system and it changes his account.
        Name or passwords can be absent in the request, the system will change only present fields.
        Old and new passwords should be present in the request together.
      security:
        - Bearer: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangeAccountRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/Account'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: |
            * Code 5 - Incorrect old password.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /account/sign-in:
    post:
      tags:
        - Account
      summary: Sign in the system
      description: User sends login and password to the system and it returns his name and JWT token.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SignInRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/SignInResponse'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: |
            * Code 4 - Incorrect login or password.
          schema:
            $ref: '#/definitions/ErrorResponse'

  #List end points
  /lists:
    get:
      tags:
        - Lists
      summary: Get user lists
      description: The system returns lists of currently authenticated user.
      security:
        - Bearer: []
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/ListItems'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Lists
      summary: Create a new list
      description: User sends new list title, and the system create new list.
      security:
        - Bearer: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListRequest'
      responses:
        201:
          description: Successful operation.
          schema:
            $ref: '#/definitions/List'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /lists/{id}:
    put:
      tags:
        - Lists
      summary: Modify the list
      description: User sends new list name, and the system renames the list.
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: List id.
          required: true
          type: integer
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/List'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Lists
      summary: Delete the list
      description: The system deletes the list with all its tasks.
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: List id.
          required: true
          type: integer
      responses:
        204:
          description: Successful operation.
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /lists/{id}/tasks:
    get:
      tags:
        - Lists
      summary: Get list tasks
      description: The system returns list task, showing tasks hierarchy.
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: List id.
          required: true
          type: integer
        - name: filter
          in: query
          description: Task filter option. Equals to "DONE_LESS_THAN_10_DAYS_AGO" by default.
            When "done" task contains undone tasks, it will be included in result anyway.
          required: false
          type: string
          enum:
            - ALL
            - DONE_LESS_THAN_10_DAYS_AGO
            - ONLY_UNDONE
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/TaskWithChildrenItems'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'

  # Task end points
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks with some filter
      description: User sends task filters (lists, tags and statuses) and the system returns filtered tasks,
        ordered by task creation date descending.
      security:
        - Bearer: []
      parameters:
        - name: list
          in: query
          description: Array of list ids to get tasks from.
          required: false
          type: array
          items:
            type: integer
            description: List id.
            example: 4
        - name: tag
          in: query
          description: Array of tags to filter tags by.
          required: false
          type: array
          items:
            $ref: '#/definitions/Tag'
        - name: status
          in: query
          description: Array of statuses to get tasks with.
          required: false
          type: array
          items:
            type: string
            description: Task status.
            enum:
              - TO_DO
              - IN_PROGRESS
              - DONE
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/TaskBriefItems'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tasks
      summary: Create a new task
      description: User sends new task title and parent task id or list id, the system creates a new task (subtask or root task correspondingly).
      security:
        - Bearer: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateTaskRequest'
      responses:
        201:
          description: Successful operation.
          schema:
            $ref: '#/definitions/Task'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get detailed task info
      description: The system returns detailed task info with its status, title, description, tags and creation, start, end dates.
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Task id.
          required: true
          type: integer
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/Task'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tasks
      summary: Modify task
      description: User sends new task title, description, tags and status, the system saves them.
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Task id.
          required: true
          type: integer
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangeTaskRequest'
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/Task'
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tasks
      summary: Delete the task
      description: The system deletes the task with all its subtasks.
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Task id.
          required: true
          type: integer
      responses:
        204:
          description: Successful operation.
        400:
          description: |
            * Code 1 - Request validation error.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'

  # Tag end points
  /tags:
    get:
      tags:
        - Tags
      summary: Get list of user tags
      description: The system returns the list of currently authenticated user tags.
      security:
        - Bearer: []
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/TagItems'
        401:
          description: |
            * Code 3 - Required JWT token is absent, invalid or expired.
          schema:
            $ref: '#/definitions/ErrorResponse'

  # Version end points
  /version:
    get:
      tags:
        - System
      summary: Get server version
      description: Version matches _Semver_ specification.
      responses:
        200:
          description: Successful operation.
          schema:
            $ref: '#/definitions/VersionResponse'

definitions:
  ErrorResponse:
    type: object
    description: This data structure is used to return error codes for HTTP 4xx responses.
    required:
      - code
      - message
    properties:
      code:
        type: integer
        description: Error code.
        example: 1
      message:
        type: string
        description: Error message.
        example: Message.

  # Account definitions
  RegistrationRequest:
    type: object
    required:
      - login
      - password
      - name
    properties:
      login:
        type: string
        description: Account login. Minimum length is 1 symbol, maximum length is 50 symbols.
        example: login
      password:
        type: string
        description: Account password. Minimum length is 8 symbols, should contain both digits and latin letters.
        example: password123
      name:
        type: string
        description: Account name. Minimum length is 1 symbol, maximum length is 100 symbols.
        example: Name

  Account:
    type: object
    required:
      - id
      - login
      - name
      - lastLoginDate
      - registrationDate
    properties:
      id:
        type: integer
        description: Account id.
        example: 10
      login:
        type: string
        description: Account login.
        example: login
      name:
        type: string
        description: Account name.
        example: name
      lastLoginDate:
        type: string
        format: date-time
        description: Account last login date.
        example: '2012-04-23T18:25:43.511Z'
      registrationDate:
        type: string
        format: date-time
        description: Account regitration date.
        example: '2012-04-23T18:25:43.511Z'

  SignInResponse:
    type: object
    required:
      - token
      - account
    properties:
      token:
        type: string
        description: JWT token for current session.
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      account:
        $ref: '#/definitions/Account'

  SignInRequest:
    type: object
    required:
      - login
      - password
    properties:
      login:
        type: string
        description: Account login. Nonempty string.
        example: login
      password:
        type: string
        description: Account password. Nonempty string.
        example: password123

  ChangeAccountRequest:
    type: object
    properties:
      name:
        type: string
        description: Account name. Minimum length is 1 symbol, maximum length is 100 symbols.
        example: Name
      oldPassword:
        type: string
        description: Account password. Nonempty string.
        example: password123
      newPassword:
        type: string
        description: Account password. Minimum length is 8 symbols, should contain both digits and letters.
        example: password123

  # List definitions
  ListItems:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/List'
  List:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
        description: List id.
        example: 5
      title:
        type: string
        description: List title.
        example: Title
  ListRequest:
    type: object
    required:
      - title
    properties:
      title:
        type: string
        description: List title. Minimum length is 1 symbol, maximum length is 100 symbols.
        example: Title

  # Task definitions
  TaskTitle:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
        description: Task id.
        example: 42
      title:
        type: string
        description: Task title.
        example: Tast title
  TaskBrief:
    type: object
    allOf:
      - $ref: '#/definitions/TaskTitle'
      - required:
          - tags
          - status
        properties:
          tags:
            type: array
            description: Task tags.
            items:
              $ref: '#/definitions/Tag'
          status:
            type: string
            description: Task status.
            enum:
              - TO_DO
              - IN_PROGRESS
              - DONE
  TaskWithChildren:
    type: object
    allOf:
      - $ref: '#/definitions/TaskBrief'
      - required:
          - children
        properties:
          children:
            type: array
            description: Task subtasks.
            items:
              $ref: '#/definitions/TaskWithChildren'
  Task:
    type: object
    allOf:
      - $ref: '#/definitions/TaskBrief'
      - required:
          - description
          - creationDate
          - startDate
          - endDate
          - parentsHierarchy
        properties:
          description:
            type: string
            description: Task description.
            example: Task description
          creationDate:
            type: string
            format: date
            description: Task creation date.
            example: '2012-04-23'
          startDate:
            type: string
            format: date
            description: Task start date.
            example: '2012-04-23'
          endDate:
            type: string
            format: date
            description: Task end date.
            example: '2012-04-23'
          parentsHierarchy:
            type: array
            items:
              $ref: '#/definitions/TaskTitle'
  TaskBriefItems:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/TaskBrief'
  TaskWithChildrenItems:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/TaskWithChildren'
  CreateTaskRequest:
    type: object
    required:
      - title
    properties:
      title:
        type: string
        description: Task title. Minimum length is 1 symbol, maximum length is 400 symbols.
        example: Tast title
      parentTaskId:
        type: integer
        description: Parent task id (in case of creation subtask).
        example: 14
      listId:
        type: integer
        description: List id (in case of creation root task).
        example: 5
  ChangeTaskRequest:
    type: object
    properties:
      title:
        type: string
        description: Task title. Minimum length is 1 symbol, maximum length is 400 symbols.
        example: Tast title
      description:
        type: string
        description: Task description. Maximum length is 2000 symbols.
        example: Task description
      tags:
        type: array
        description: Task tags. Minimum length of each tag is 1 symbol, maximum length of each tag is 100 symbols.
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: Task status.
        enum:
          - TO_DO
          - IN_PROGRESS
          - DONE

  # Tag definitions
  TagItems:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Tag'
  Tag:
    type: string
    description: Tag name.
    example: Tag

  # Version definitions
  VersionResponse:
    type: object
    required:
      - version
    properties:
      version:
        type: string
        description: Server version in semver format.
        example: 1.2.3
